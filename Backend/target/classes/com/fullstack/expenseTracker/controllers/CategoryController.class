// Source code is decompiled from a .class file using FernFlower decompiler.
package com.fullStack.expenseTracker.controllers;

import com.fullStack.expenseTracker.dto.reponses.ApiResponseDto;
import com.fullStack.expenseTracker.dto.requests.CategoryRequestDto;
import com.fullStack.expenseTracker.expections.CategoryAlreadyExistsException;
import com.fullStack.expenseTracker.expections.CategoryNotFoundException;
import com.fullStack.expenseTracker.expections.CategoryServiceLogicException;
import com.fullStack.expenseTracker.expections.TransactionTypeNotFoundException;
import com.fullStack.expenseTracker.services.CategoryService;
import com.fullStack.expenseTracker.services.TransactionTypeService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@CrossOrigin(
   origins = {"http://localhost:3000"}
)
@RestController
@RequestMapping({"/mywallet/category"})
public class CategoryController {
   @Autowired
   private CategoryService categoryService;
   @Autowired
   private TransactionTypeService transactionTypeService;

   public CategoryController() {
   }

   @GetMapping({"/getAll"})
   @PreAuthorize("hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')")
   public ResponseEntity<ApiResponseDto<?>> getAllCategories() {
      return this.categoryService.getCategories();
   }

   @PostMapping({"/new"})
   @PreAuthorize("hasRole('ROLE_ADMIN')")
   public ResponseEntity<ApiResponseDto<?>> addNewCategory(@RequestBody @Valid CategoryRequestDto categoryRequestDto) throws CategoryServiceLogicException, TransactionTypeNotFoundException, CategoryAlreadyExistsException {
      return this.categoryService.addNewCategory(categoryRequestDto);
   }

   @PutMapping({"/update"})
   @PreAuthorize("hasRole('ROLE_ADMIN')")
   public ResponseEntity<ApiResponseDto<?>> updateCategory(@Param("categoryId") int categoryId, @RequestBody @Valid CategoryRequestDto categoryRequestDto) throws CategoryServiceLogicException, CategoryNotFoundException, TransactionTypeNotFoundException {
      return this.categoryService.updateCategory(categoryId, categoryRequestDto);
   }

   @DeleteMapping({"/delete"})
   @PreAuthorize("hasRole('ROLE_ADMIN')")
   public ResponseEntity<ApiResponseDto<?>> disableOrEnableCategory(@Param("categoryId") int categoryId) throws CategoryServiceLogicException, CategoryNotFoundException {
      return this.categoryService.enableOrDisableCategory(categoryId);
   }
}
